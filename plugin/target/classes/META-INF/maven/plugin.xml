<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2013-03-20 -->

<plugin>
  <name>vertx-maven-plugin</name>
  <description>Sonatype helps open source projects to set up Maven repositories on https://oss.sonatype.org/</description>
  <groupId>org.vertx.build.maven</groupId>
  <artifactId>vertx-maven-plugin</artifactId>
  <version>2.0.0-SNAPSHOT</version>
  <goalPrefix>vertx</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>pullInDeps</goal>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.vertx.maven.plugin.mojo.VertxPullInDepsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The path on which to search for the main and any other resources used by
the verticle.
&lt;/p&gt;
&lt;p&gt;
If your verticle references other scripts, classes or other resources
(e.g. jar files) then make sure these are on this path. The path can
contain multiple path entries separated by : (colon).
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>configFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The config file for this verticle.
&lt;/p&gt;
&lt;p&gt;
If the path is relative (does not start with / or a drive letter like
C:), the path is relative to the directory containing the POM.
&lt;/p&gt;
&lt;p&gt;
An example value would be src/main/resources/com/acme/MyVerticle.conf
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>daemon</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Determines whether or not the server blocks when started. The default
behaviour (daemon = false) will cause the server to pause other processes
while it continues to run the verticle. This is useful when starting the
server with the intent to work with it interactively.
&lt;/p&gt;
&lt;p&gt;
Often, it is desirable to let the server start and continue running
subsequent processes in an automated build environment. This can be
facilitated by setting daemon to true.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>instances</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of instances of the verticle to instantiate in the vert.x
server. The default is 1.</description>
        </parameter>
        <parameter>
          <name>moduleName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the module to run.

If you&apos;re running a module, it&apos;s the name of the module to be run.</description>
        </parameter>
        <parameter>
          <name>vertxHomeDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The home directory of your vert.x installation i.e. where you unzipped
the vert.x distro. For example C:/vert.x/vert.x-1.0.1.final
&lt;/p&gt;
&lt;p&gt;
You will need to set this configuration option if you want to run any
out-of-the box modules like web-server.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>vertxModulesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The home directory of your project modules i.e. target/mods
&lt;/p&gt;
&lt;p&gt;
You will need to set this configuration option if you want to run any
out-of-the box modules like web-server.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>mavenProject</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <classpath implementation="java.lang.String">${run.classpath}</classpath>
        <configFile implementation="java.io.File">${run.configFile}</configFile>
        <daemon implementation="boolean" default-value="true">${run.daemon}</daemon>
        <instances implementation="java.lang.Integer" default-value="1">${run.instances}</instances>
        <moduleName implementation="java.lang.String" default-value="${project.groupId}~${project.artifactId}~${project.version}">${run.moduleName}</moduleName>
        <vertxHomeDirectory implementation="java.lang.String">${run.vertxHomeDirectory}</vertxHomeDirectory>
        <vertxModulesDirectory implementation="java.lang.String" default-value="${basedir}/mods">${run.vertxModulesDirectory}</vertxModulesDirectory>
        <mavenProject implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>runmod</goal>
      <description>&lt;p&gt;
This goal is used to run a vert.x verticle in it&apos;s own instance.
&lt;/p&gt;
q
&lt;p&gt;
The plugin forks a parallel lifecycle to ensure that the &quot;package&quot; phase has
been completed before invoking vert.x. This means that you do not need to
explicitly execute a &quot;mvn package&quot; first. It also means that a
&quot;mvn clean vertx:run&quot; will ensure that a full fresh compile and package is
done before invoking vert.x.
&lt;/p&gt;</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.vertx.maven.plugin.mojo.VertxRunModMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The path on which to search for the main and any other resources used by
the verticle.
&lt;/p&gt;
&lt;p&gt;
If your verticle references other scripts, classes or other resources
(e.g. jar files) then make sure these are on this path. The path can
contain multiple path entries separated by : (colon).
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>configFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The config file for this verticle.
&lt;/p&gt;
&lt;p&gt;
If the path is relative (does not start with / or a drive letter like
C:), the path is relative to the directory containing the POM.
&lt;/p&gt;
&lt;p&gt;
An example value would be src/main/resources/com/acme/MyVerticle.conf
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>daemon</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Determines whether or not the server blocks when started. The default
behaviour (daemon = false) will cause the server to pause other processes
while it continues to run the verticle. This is useful when starting the
server with the intent to work with it interactively.
&lt;/p&gt;
&lt;p&gt;
Often, it is desirable to let the server start and continue running
subsequent processes in an automated build environment. This can be
facilitated by setting daemon to true.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>instances</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of instances of the verticle to instantiate in the vert.x
server. The default is 1.</description>
        </parameter>
        <parameter>
          <name>moduleName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the module to run.

If you&apos;re running a module, it&apos;s the name of the module to be run.</description>
        </parameter>
        <parameter>
          <name>vertxHomeDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The home directory of your vert.x installation i.e. where you unzipped
the vert.x distro. For example C:/vert.x/vert.x-1.0.1.final
&lt;/p&gt;
&lt;p&gt;
You will need to set this configuration option if you want to run any
out-of-the box modules like web-server.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>vertxModulesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The home directory of your project modules i.e. target/mods
&lt;/p&gt;
&lt;p&gt;
You will need to set this configuration option if you want to run any
out-of-the box modules like web-server.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>mavenProject</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <classpath implementation="java.lang.String">${run.classpath}</classpath>
        <configFile implementation="java.io.File">${run.configFile}</configFile>
        <daemon implementation="boolean" default-value="true">${run.daemon}</daemon>
        <instances implementation="java.lang.Integer" default-value="1">${run.instances}</instances>
        <moduleName implementation="java.lang.String" default-value="${project.groupId}~${project.artifactId}~${project.version}">${run.moduleName}</moduleName>
        <vertxHomeDirectory implementation="java.lang.String">${run.vertxHomeDirectory}</vertxHomeDirectory>
        <vertxModulesDirectory implementation="java.lang.String" default-value="${basedir}/mods">${run.vertxModulesDirectory}</vertxModulesDirectory>
        <mavenProject implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-tools-api</artifactId>
      <type>jar</type>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-6</version>
    </dependency>
    <dependency>
      <groupId>backport-util-concurrent</groupId>
      <artifactId>backport-util-concurrent</artifactId>
      <type>jar</type>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-descriptor</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <type>jar</type>
      <version>3.8.1</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-tools-annotations</artifactId>
      <type>jar</type>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
      <type>jar</type>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.5.5</version>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm-commons</artifactId>
      <type>jar</type>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm-tree</artifactId>
      <type>jar</type>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-archiver</artifactId>
      <type>jar</type>
      <version>2.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-io</artifactId>
      <type>jar</type>
      <version>2.0.3</version>
    </dependency>
    <dependency>
      <groupId>com.thoughtworks.qdox</groupId>
      <artifactId>qdox</artifactId>
      <type>jar</type>
      <version>1.12.1</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-platform</artifactId>
      <type>jar</type>
      <version>2.0.0-20130320.140756-385</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <type>jar</type>
      <version>2.0.0-20130320.140730-386</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <type>jar</type>
      <version>1.2.16</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <type>jar</type>
      <version>1.9.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <type>jar</type>
      <version>1.9.4</version>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <type>jar</type>
      <version>4.0.0.Beta3</version>
    </dependency>
    <dependency>
      <groupId>com.hazelcast</groupId>
      <artifactId>hazelcast</artifactId>
      <type>jar</type>
      <version>2.4.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.2</version>
    </dependency>
  </dependencies>
</plugin>