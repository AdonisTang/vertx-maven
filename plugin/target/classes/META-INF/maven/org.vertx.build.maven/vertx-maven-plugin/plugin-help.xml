<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2013-03-20 -->

<plugin>
  <name>vertx-maven-plugin</name>
  <description>Sonatype helps open source projects to set up Maven repositories on https://oss.sonatype.org/</description>
  <groupId>org.vertx.build.maven</groupId>
  <artifactId>vertx-maven-plugin</artifactId>
  <version>2.0.0-SNAPSHOT</version>
  <goalPrefix>vertx</goalPrefix>
  <mojos>
    <mojo>
      <goal>pullInDeps</goal>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.vertx.maven.plugin.mojo.VertxPullInDepsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The path on which to search for the main and any other resources used by the verticle.

If your verticle references other scripts, classes or other resources (e.g. jar files) then make sure these are on this path. The path can contain multiple path entries separated by : (colon).
</description>
        </parameter>
        <parameter>
          <name>configFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The config file for this verticle.

If the path is relative (does not start with / or a drive letter like C:), the path is relative to the directory containing the POM.

An example value would be src/main/resources/com/acme/MyVerticle.conf
</description>
        </parameter>
        <parameter>
          <name>daemon</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Determines whether or not the server blocks when started. The default behaviour (daemon = false) will cause the server to pause other processes while it continues to run the verticle. This is useful when starting the server with the intent to work with it interactively.

Often, it is desirable to let the server start and continue running subsequent processes in an automated build environment. This can be facilitated by setting daemon to true.
</description>
        </parameter>
        <parameter>
          <name>instances</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of instances of the verticle to instantiate in the vert.x server. The default is 1.</description>
        </parameter>
        <parameter>
          <name>moduleName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the module to run. If you&apos;re running a module, it&apos;s the name of the module to be run.</description>
        </parameter>
        <parameter>
          <name>vertxHomeDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The home directory of your vert.x installation i.e. where you unzipped the vert.x distro. For example C:/vert.x/vert.x-1.0.1.final

You will need to set this configuration option if you want to run any out-of-the box modules like web-server.
</description>
        </parameter>
        <parameter>
          <name>vertxModulesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The home directory of your project modules i.e. target/mods

You will need to set this configuration option if you want to run any out-of-the box modules like web-server.
</description>
        </parameter>
      </parameters>
      <configuration>
        <classpath implementation="java.lang.String">${run.classpath}</classpath>
        <configFile implementation="java.io.File">${run.configFile}</configFile>
        <daemon implementation="boolean" default-value="true">${run.daemon}</daemon>
        <instances implementation="java.lang.Integer" default-value="1">${run.instances}</instances>
        <moduleName implementation="java.lang.String" default-value="${project.groupId}~${project.artifactId}~${project.version}">${run.moduleName}</moduleName>
        <vertxHomeDirectory implementation="java.lang.String">${run.vertxHomeDirectory}</vertxHomeDirectory>
        <vertxModulesDirectory implementation="java.lang.String" default-value="${basedir}/mods">${run.vertxModulesDirectory}</vertxModulesDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>runmod</goal>
      <description>This goal is used to run a vert.x verticle in it&apos;s own instance.
q
The plugin forks a parallel lifecycle to ensure that the &apos;package&apos; phase has been completed before invoking vert.x. This means that you do not need to explicitly execute a &apos;mvn package&apos; first. It also means that a &apos;mvn clean vertx:run&apos; will ensure that a full fresh compile and package is done before invoking vert.x.
</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.vertx.maven.plugin.mojo.VertxRunModMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The path on which to search for the main and any other resources used by the verticle.

If your verticle references other scripts, classes or other resources (e.g. jar files) then make sure these are on this path. The path can contain multiple path entries separated by : (colon).
</description>
        </parameter>
        <parameter>
          <name>configFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The config file for this verticle.

If the path is relative (does not start with / or a drive letter like C:), the path is relative to the directory containing the POM.

An example value would be src/main/resources/com/acme/MyVerticle.conf
</description>
        </parameter>
        <parameter>
          <name>daemon</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Determines whether or not the server blocks when started. The default behaviour (daemon = false) will cause the server to pause other processes while it continues to run the verticle. This is useful when starting the server with the intent to work with it interactively.

Often, it is desirable to let the server start and continue running subsequent processes in an automated build environment. This can be facilitated by setting daemon to true.
</description>
        </parameter>
        <parameter>
          <name>instances</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of instances of the verticle to instantiate in the vert.x server. The default is 1.</description>
        </parameter>
        <parameter>
          <name>moduleName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the module to run. If you&apos;re running a module, it&apos;s the name of the module to be run.</description>
        </parameter>
        <parameter>
          <name>vertxHomeDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The home directory of your vert.x installation i.e. where you unzipped the vert.x distro. For example C:/vert.x/vert.x-1.0.1.final

You will need to set this configuration option if you want to run any out-of-the box modules like web-server.
</description>
        </parameter>
        <parameter>
          <name>vertxModulesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The home directory of your project modules i.e. target/mods

You will need to set this configuration option if you want to run any out-of-the box modules like web-server.
</description>
        </parameter>
      </parameters>
      <configuration>
        <classpath implementation="java.lang.String">${run.classpath}</classpath>
        <configFile implementation="java.io.File">${run.configFile}</configFile>
        <daemon implementation="boolean" default-value="true">${run.daemon}</daemon>
        <instances implementation="java.lang.Integer" default-value="1">${run.instances}</instances>
        <moduleName implementation="java.lang.String" default-value="${project.groupId}~${project.artifactId}~${project.version}">${run.moduleName}</moduleName>
        <vertxHomeDirectory implementation="java.lang.String">${run.vertxHomeDirectory}</vertxHomeDirectory>
        <vertxModulesDirectory implementation="java.lang.String" default-value="${basedir}/mods">${run.vertxModulesDirectory}</vertxModulesDirectory>
      </configuration>
    </mojo>
  </mojos>
</plugin>